.Page.dddoc
..summary:The documentation system "dot-dot-doc".
..description
...text:
:Seqan uses its own documentation system, called "dot-dot-doc", or shortly "ddoc".
This document describes the documentation system.

...contents

...section:# General principles
...text:
The documentation can be viewed as a tree and is distributed over several files.
The files are either special dddoc files (ending in .dddoc) or C++ source code files.
This file is a dddoc file. In C++ source code files one can introduce documentation
by using the special comments /** or ///.
The documentation is generated by a phyton script that searches all files for documentation
commands and builds from this a coherent documentation in HTML (for later a PDF documentation is planned).

Using Windows, the documentation is build by calling "make.bat" in the "docs"
directory, using Linux by calling "make.sh". In both cases optioinal arguments
specify which modules are builti (WAS IST EIN MODUL?). If no modul is specified then the complete
documentation is built. In order to build only the pages residing under "docs" one can specify as modul name
"static" (or any other name that is not a real modul).

...section:# Notation
...text:
The documentation is stored as a dddoc tree.
Each node in a dddoc tree has an ID string.
The path from the root to another node in the tree is given by enumerating the corresponding ID strings
of all nodes on the path. In the enumeration the ID strings are separated using a ".". For example 
"animals.pets.dogs.wuffi".
...text:
Each node in a dddoc tree also contains one or more (possibly empty) pieces of text. If more than one entries
are present, the text pieces are concatenated.
 
...text: 
(ÃœBERARBEITEN, WELCHE DATENSTRUKTUR?) An entry in the data structure
has the form ".[Pfad]:[Text]". Each entry has to start in a new line, that means
the first character in the line is ".".
A path is interpreted as a subpath of the preceeding path of the same documentation block (WAS IST EIN KOMMENTARBLOCK?), if it starts with a ".". If a path starts with n dots, then he refers to closest preceeding path with n-1 dots.

...subsection:Example #

...code:.animals.pets
\dot.dog.wuffi
\dot..name:Waldemar
\dot..age:5
\dot.cat.Minka
\dot..age:2

...text:The above is the same as:

...code:.animals.pets.dog.wuffi.name.Waldemar
\dotanimals.pets.dogs.wuffi.age:5
\dotanimals.pets.cats.Minka.age:2

...subsection:Example #

...code:.address.name:Andreas D\"oring
\dot.Kommentar:That is a comment,
 which contains several lines.
\dot.Kommentar:This will be appended to the previous comment.

...subsection:Example #

...code:.Domainen."www.microsoft.com":Microsoft Homepage


...section:# Entries
...text:
The documentation consists of a number of entries.
Each entry in dddoc has the form "[Category].[Name]".

...subsection:#.# Categories

...text:At the moment dddoc supports the following entry categories:
...table:"Page"|general content, e.g. tutorials etc.
...table:"Concept"|concepts
...table:"Class"|classes
...table:"Spec"|specializations
...table:"Shortcut"|shortcuts
...table:"Function"|(global) functions
...table:"Memfunc"|member functions
...table:"Memvar"|member variables
...table:"Metafunction"|meta functions
...table:"Tag"|tag
...table:"Adaption"|adapters
...table:"Demo"|examples programs

...text:In addition dddoc supports the following technical categories:        
...table:"Internal"|is used to document internal entries that should not belong to the official documentation of the library. Hence is is advisable not to introduce links from or to this category.
...table:"globals"|stores meta information and constants that are used for the generation of the documentation.In addition it is used to define index pages for the individual categories.
    
...text:Sub-categories are specified using the "cat" entry. (WAS HEISST DAS?)

...subsection:#.# Names

...text:[Name] is the name of the entity that is documented in the specific
entry, e.g. a function or class. If it is desired, another name can be displayed
as title by sing the "title" field. (WO WIRD EIN TITTLE ANGEZEIGT?)
...text: If the name contains a "#" character, then only the string after the (first) "#" character
is displayed. This should be used for Memfunc and Memvar entries: write the class name
in front of the"#" and the member name after it. Instead of the "#" character the "\pipe" character can also be used.

...section:# Fields
...text:
Fields define the properties of an entry.
A field has the form "[Category].[Name].[Field]":

...subsection:Special fields

...table:"title"|title of the page (optional). Default is [Name].
...table:"summary"|Short summary of the entry. Please place longer descriptions under "remarks" or "description".
...table:"cat"|subcategory. The text appears in the documentation in a subfolder of [category].
each entry can possess several subcategories. In this case the tex appears in all corresponding subfolders.
...table:"signature"|Isolated piece of code that demonstates the use of the entity.
        for example: "$length(container)$"
...table:"file"|displays the source file if given the path to a .cpp file. Should be used only for demos.
ALl lines in the source file that start with a dddoc comment (e.g. "///") are displayed as an ordinary C++ comments.
...table:"hidefromindex"|Exlude entry from the indices (navigation/overview pages).
...table:"order"|the string is used instead of [Name] for sorting the entries in indices and menus.
Please note that numbers are parsed as text, hence
the entry ".order:10" will be placed in front of ".order:2".

...subsection:Text fields
...table:"description"|descriptive text. Can be used for tutorials. 
...table:"example"|code examples.
...table:"include"|name of header file you have to include to use the entity.
...table:"remarks"|comments.
...table:"returns"|return value. If several return values are given, the subfield "param" should be used after "return". 
    
...subsection:Tables of text fields
...text:Children nodes below a table field are sorted alphabetically and output in form of a table of text fields (STIMMT DAS?).
...table:"param"|argument. e.g. "..param.length:length of a field"
...table:"value"|Possible value an entity can take.

...subsection:Link fields
...text:link fields entries which each other.
...table:"baseconcept"|link to a concept. (??????If using Concept: Basiskonzept. (inserts back link: "childconcept")
...table:"class"|link to class or spec. Using Memfunc or Memvar: name of the class belonging to the entity. 
(inserts links "memfunc" or "memvar")
...table:"concept"|link to concept. Concept requires the existance of the entry in order to work (???um erf\"ullt zu sein. )
...table:"demo"|link to a demo. Demo explains how to use the entry. (inserts back link "demofor")
...table:"general"|for Spec: The correspnding class. (inserts back link "spec")
...table:"implements"|concept that is implemented using the class/spec.
...table:"see"|crossreference to naother entry. (inserts back link "see").
...table:"base"|link to class or spec. If Class or Spec: The base class. (inserts back link: "derived")
...table:"shortcutfor"|link to entry, for which the entry is a shortcut for. (inserts back  link: "shortcut")

...text:
In addition, there are the following link fields (However, we discourage the user of dddoc to use them, since
most links can be set with the commands mentioned above): 
...table:"demofor"|for demo: link to an entity in a demo. (inserts back link "demo")
...table:"derived"|for class or spec: A specialisation.
...table:"memfunc"|for class or spec: A member function.
...table:"memvar"|for class or spec: A member variable.
...table:"spec"|for class or spec: A specialisation.
...table:"type"|for class or spec: A meta function (is inserted as link by using "param.[Name].type" in Metafunktion
...table:"function"|For class or spec: a function (is inserted as link by using "param.[Name].type", "returns.type" or "returns.[Name].type" in function
...table:"conceptmetafunc"| link to "concept"
...table:"conceptmemvar"| link to "concept"
...table:"conceptmemfunc"| link to "concept"
...table:"conceptfunc"| link to "concept"
...table:"conceptusedby"| link to "concept"
...table:"conceptimplements"|link to "implements"
...table:"childconcept"|link to "baseconcept"
...table:"shortcut"|link to shortcut. (inserts back link "shortcutfor")


...section:# Subfields
...text:children nodes below text fields. 

...subsection:Free subfields
...text:
Free subfields are output in the order they appear in the sources.
All other subfields are collected and displayed unter the corresponding subsection heading.
...table:"section"|inserts new section heading. The first occurence of the "#" character is replaced by a section number. 
example: "..section:#. My chapter"
...table:"subsection"|inserts heading for new subsection. If the heading contains exactly one "#" character
then it is replaced by the subsection number. Otherwise the dirst "#" character is replaced by the section number and the second "#" character by the subsection number.
examples: "..subsection:#.# Subsection", "..subsection:Example #"
...table:"contents"|builts a table of contents in which all sections and subsections of this field are displayed.
...table:"text"|a text paragraph.
...table:"note"|an emphasized text paragraph.
...table:"code"|example code.
...table:"image"|Inserts an image. Needed is the name (optinally with a relativ path) of the image (without extension). If the documentation is constructed in HTML then teh extension ".png" is automatically appended.
Images should be stored in the "img" folder. Optionally a caption can be given by using the"\pipe" command.
e.g. "..image:seqan_logo_large\pipe This is the large SeqAn logo.".
Should more images appear next to each other then one can specify the additional images with more "\pipe"
commands, e.g. "..image:file1\pipecaption1\pipefile2\pipecaption2\pipefile3\pipecaption3".
...table:"table"|displays a row of a table. The columns are separated using the "\pipe" command. 
Subsequent "table" and "tableheader" subfields are put  together in one table.
...table:"tableheader"|displays an emphasized table row (the columns contain the header text).
...table:"field"|displays the field of an entry. For example "..field:Class.String.spec" displays a list of all specializations of the class.(?? VERSTEH ICH NICHT?)

...subsection:Text Subfields
...table:"value"|a value.
...table:"default"|default value.
...table:"remarks"|commentary or code.
    
...subsection:Tables of text subfields
...table:"param"|list of parameters. Is uded in conjunction with "returns" to list different return values.
...subsection:link subfields
...table:"metafunktion"|link to a meta function. For "param" or "return" fields e.g. to the meta function 
that yields the typ of the arguments or of the return values.
...table:"type"|link to a type (class, spec oder adapter). For "param" or "return" fields for example
the type of the arguments or of the return value (inserts link: "function" function, "type" for meta functions.)
...table:"concept"|link to a concept. For "param" fields, e.g. a concept, that has tu fulfill the argument (???). (inserts link: "conceptusedby")
...table:"see"|link to another entry. (does not insert back link)
   

...section:# Formatting text
...text:
We allow LaTeX special characters in text (not in ID strings). e.g.  \\Sigma, \\in and \\leftarrow produce the
charactersn \Sigma, \in resp. \leftarrow. 
In this manner also european special characters can be inserted.
In this mnanner one can also use command characters reserved in dddoc. For example
\\dot, \\quote, \\at, \\pipe, \\dollar and \\backslash produce \dot, \quote, \at, \pipe, \dollar and \backslash.
A list with all available characters can be found in dddoc_html_trans.py.
...text:Other possibilities to speical characters: \\\\ stands for \\, \dollar\dollar for \dollar.
...text:
If C++ code should be displayed within a text field or subfield, it should be placed between \dollar, e.g.: \dollarint x\dollar yields: $int x$.


...section:# Links
...text:
 Links to entries are written as follows: "[Category].[Name]", e.g. "Class.String" gives: "@Class.String@".
 Links to the overview page of a category as follows: "[Category]", e.g. "@Metafunction@".
 Links to external  URLs start with "http:", e.g. "@http://www.seqan.de@".
...text:
 If another text should be displayed fr the link it can be appended using the "\pipe" character, 
 e.g. "Class.String\pipethe string classe" erzeugt: @Class.String|the string class@. 
 or "http://www.seqan.de\pipeLink to SeqAn Homepage" gives: @http://www.seqan.de|Link to SeqAn Homepage@.
 Optionally one can also write the display text of a link to an entry
after an additional "." instead of a "|".
...text:
Within a text field/subfield one can insert links by placing them between  \at characters, e.g. "click \atClass.String.here\at!" gives: click  @Class.String.here@!

