DDDOC - "Dot-Dot-Doc" - Das SEQAN Dokumentationssystem

Autor: Andreas Döring, doering@inf.fu-berlin.de
Anmerkung: Diese Doku ist nicht unbedingt vollständig. 


1. Prinzipien:
==============
- Die Dokumentation ist eine große, hierarchisch gegliederte Datenstruktur ("Baum")
- Sie ist auf mehrere Dateien verteilt.
- Diese Dateien sind entweder spezielle dddoc-Dateien (Endung: ".dddoc"), oder aber C++-Sourcen.
- In C++ Sourcen gelten Kommentare, die mit /** oder mit /// beginnen, als Bereiche, in denen dddoc-Information steht.
- Python-Skripts durchsuchen alle Dateien des Projekts, sammeln die Information zusammen und generieren anschließend daraus die Dokumentation.
- Bislang ist die generierte Dokumentation in HTML, später soll z.B. auch LaTeX dazu kommen.



2. Notation:
============
- Die Dokumentation wird in Form eines dddoc-Baumes gespeichert.
- Jeder Konten in einem dddoc-Baum besitzt einen ID-String.
- Den Pfad im dddoc-Baum von der Wurzel zu einem Knoten notiert man durch Aufzählen der ID-Strings aller Knoten auf diesem Pfad, wobei man die ID-Strings durch "." voneinander abtrennt. Beispiel: "Tiere.Haustiere.Hunde.Waldi"
- Jeder Knoten in einem dddoc-Baum besitzt einen (eventuell leeren) Text. Existieren mehrere Einträge für den gleichen Knoten, so werden alle Texte hintereinander gehängt.
- Ein Eintrag in die Datenstruktur hat die Form ".[Pfad]:[Text]". Dabei muss der Eintrag mit einer neuen Zeile beginnen, d.h. das erste Zeichen in der Zeile ist ".".
- Ein Pfad wird als Unterpfad eines vorangegangenen Pfades des selben Kommentarblocks interpretiert, wenn er mit einem Punkt beginnt. Beginnt ein Pfad mit n Punkten, so bezieht er sich auf den letzten davor stehenden Pfad mit n-1 Punkten. 
- In Texten (nicht in den ID-Strings) sind auch LaTeX-Sonderzeichen erlaubt, z.B. \Sigma, \in, \leftarrow. Die Liste mit allen verfügbaren Zeichen steht in dddoc_html_trans.py.


Beispiel 1:

.Tiere.Haustiere
..Hund.Waldi
...Name:Waldemar
...Alter:5
..Katze.Minka
...Alter:2

Das ist das selbe wie:

.Tiere.Haustiere.Hund.Waldi.Name:Waldemar
.Tiere.Haustiere.Hund.Waldi.Alter:5
.Tiere.Haustiere.Katze.Minka.Alter:2


Beispiel 2:

.Adresse.Name:Andreas Döring
..Kommentar:Dies ist ein Kommentar,
der über mehrere Zeilen geht.
..Kommentar:Dies wird an den anderen Kommentar angehängt.


Beispiel 3:

.Domainen."www.microsoft.com":Microsoft Homepage



3. Aufbau der Dokumentation:
============================
Die Dokumentation besteht aus einer Reihe von Entries.
Jeder Entry in dddoc hat die Form "[Category].[Name]"

- [Category]: Im Moment gibt es folgende Kategorien von Entries: 
    - "Page": Generelle Seiten, z.B. Tutorials usw.
    - "Concept": Konzepte
    - "Class": Klassen
    - "Spec": Spezialisierungen
    - "Shortcut": Shortcuts
    - "Function": (globale) Funktionen
    - "Memfunc": Memberfunktionen
    - "Memvar": Membervariablen
    - "Metafunction": Metafunktionen
    - "Tag": Tag
    - "Adaption": Adaptoren
    - "Demo": Beispielprogramme
    
    Außerdem gibt es folgende technische Kategorien:        
    - "Internal" dient zur Dokumentation interner Entitäten, die nicht zum offiziellen Benutzerinterface der Bibliothek gehören. Auf Entitäten dieser Kategory sollte aus anderen Kategorien heraus nicht verlinkt werden oder umgekehrt.
    - "globals" speichert Metainformation und Konstanten, die bei der Erzeugung der Dokumentation verwendet werden. Außerdem werden die Indexpages für die einzelnen Kategorien hier definiert.
    
    Unterkategorien werden mit dem "cat"-Entry spezifiziert.

- [Name]: Der Name der in diesem Eintrag dokumentierten Entität, d.h. der Funktion, Klasse, usw. 
    Wenn ein anderer Name als Titel angezeigt werden soll, so verwende man ein "title"-Field.
    Enthält der Name ein "#"-Zeichen, so wird lediglich der String hinter dem (ersten) "#"-Zeichen dargestellt.
    Dies sollte z.B. bei Memfunc und Memvar-Einträgen geschehen: Vor dem "#"-Zeichen schreibe man den Klassennamen, hinter das "#"-Zeichen den Namen des Members.


4. Fields
===========
Fields definieren die Eigenschaften der Entries. 
Ein Field hat die Form "[Category].[Name].[Field]":
 
- Spezielle Fields: 
    - "title": Titel der Seite (optional). Default ist [Name].
    - "summary": Kurzbeschreibung des Entrys. Längere Beschreibungen in "remarks" oder "description".
    - "cat": Unterkategorie. 
        Die Dokumentation erscheint in der Dokumentation unterhalb von [Category] in einem Unterordner. 
        Eine Entität kann mehrere Unterkategorien besitzen, in diesem Fall erscheint die Dokumentation in verschiedenen Unterordnern.
    - "signature": Abstrahiertes Codestück, dass die Verwendung der Entität verdeutlicht. 
        Beispiel: "length(container)"
    - "file": Zeigt einen Source File an. Siehe unten.
    - "hidefromindex": Entry nicht in Indexen (Navigation/Übersichtsseiten) aufführen.

- Text Fields:
    - "description": Weiterer Text oder Code zur Beschreibung der Entität.
    - "example": Beispieltext oder -code.
    - "remarks": Kommentartext oder -code.
    - "returns": Rückgabewert.
    
- Listen von Text Fields:
    - "param": Funktionsargument.
    - "value": Ein Wert, den die Entität annehmen kann.
    - "include": Name des Header-Files, das included werden muss, um die Entität zu benutzen.
    
- Link Fields:    
    - "baseconcept": Link auf Concept. Bei Concept: Basiskonzept. (erzeugt Rückverweis: "childconcept")
    - "class": Link auf Class oder Spec. Bei Memfunc oder Memvar: Name der zu der Entität gehörenden Klasse. (erzeugt Rückverweis "memfunc" oder "memvar")
    - "concept": Link auf Concept. Concept fordert die Existenz des Entrys, um erfüllt zu sein. 
    - "demo": Link auf eine Demo. Demo zeigt die Verwendung des Entrys. (erzeugt Rückverweis "demofor")
    - "general": Bei Spec: Die zugehörige generelle Klasse. (erzeugt Rückverweis "spec")
    - "implements": Concept, das die aktuelle Klasse/Spec implementiert
    - "see": Querverweis zu einer anderen Entität. (erzeugt Rückverweis "see").
    - "base": Link auf Class oder Spec. Bei Class oder Spec: Die Basisklasse. (erzeugt Rückverweis: "derived")
    - "shortcutfor": Link auf Entry, für den der aktueller Entry ein Shortcut ist. (erzeugt Rückverweis: "shortcut")

    (- "demofor": Bei Demo: Link auf in Demo verwendete Entität. (erzeugt Rückverweis "demo"))
    (- "memfunc": Bei Class oder Spec: Eine Memberfunktion (erzeugt Rückverweis "class"))
    (- "memvar": Bei Class oder Spec: Eine Membervariable (erzeugt Rückverweis "class"))
    (- "spec": Bei Class oder Spec: Eine Spezialisierung (erzeugt Rückverweis "general"))
    (- "type": Bei Class oder Spec: Eine Metafunktion (wird erzeugt als Rückverweis durch "param.[Name].type" in Metafunktion)
    (- "function": Bei Class oder Spec: Eine Funktion (wird erzeugt als Rückverweis durch "param.[Name].type" in Funktion)
    (- conceptmetafunc, conceptmemvar, conceptmemfunc, conceptfunc, conceptimplements, conceptusedby, childconcept: Rückverweise von concept, implements)
    (- shortcut: Rückverweis für shortcutfor)



5. Formatierungen
=================
- In manche Textbereiche können Querverweise auf andere Entitäten eingefügt werden. Das Format hierfür ist @[Category].[Name]@ oder @[Category].[Name].[Displaytext]@. Wird [Displaytext] angegeben, so wird dieser Text angezeigt, ansonsten [Name]. Man beachte, dass in bestimmten Fällen, wie z.B. bei [Section]="see", der Text automatisch als Querverweis aufgefasst wird, d.h. ohne umschließende @-Zeichen.
(externe links: beginnen mit http, hier der displayname nach |-Zeichen)
- Soll ein Text als C++-Code gesetzt werden, so schreibt man ihn zwischen zwei $. Beispiel: $int x$.


6. Subsections
==============
6.1 image:
- Bilder immer ohne Endung ".png" bzw. ".esp" angeben. Im HTML-Export wird automatisch ".png" angehängt - man verwende dafür also das ".png"-Format.
- Alle Bilder im "img"-Ordner ablegen.
- Der Titel des Bildes kann optional hinter ":" angehängt werden. Z.B:

..remarks.image:seqan_logo_large:Dies ist das große SeqAn-Logo.

6.2 param: 
Anzeige einer Tabellenzeile


7. Beispiele:
=============
Siehe im Code von SEQAN.

8. Indexpages:
=============
Der Text der Indexpages für die einzelnen Kategorien werden in .globals.indexpage.[Category] definiert.
z.B. ".globals.indexpage.Metafunction"

In Indexpages verwendbare Sections:
- title
- summary
- text
- remarks
- example
- see


9. Source Files:
==================
Mit der Section "file" eingebundene Datei.
Zeilen der Datei, die mit "///" beginnen, werden als Kommentar gesetzt.