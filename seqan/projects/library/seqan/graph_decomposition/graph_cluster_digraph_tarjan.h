// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2010, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================
// Author: Manuel Holtgrewe <manuel.holtgrewe@fu-berlin.de>
// ==========================================================================
// Implementation of the Digraph clustering algorithm by Tarjan.
// ==========================================================================

#ifndef SEQAN_HEADER_GRAPH_DECOMPOSITON_GRAPH_CLUSTER_DIGRAPH_TARJAN_H_
#define SEQAN_HEADER_GRAPH_DECOMPOSITON_GRAPH_CLUSTER_DIGRAPH_TARJAN_H_

namespace seqan {

// ============================================================================
// Forwards
// ============================================================================

// ============================================================================
// Classes, Structs, Enums, Tags
// ============================================================================

/**
.Spec.Digraph Cluster Decomposition
..summary:Clustering of a directed graph, e.g. as generated by 
..general:Class.GraphDecomposition
..cat:Graph Decomposition
..signature:GraphDecomposition<TGraph, DigraphCluster>
..param.TGraph:The type of the graph to decompose.
...type:Spec.Directed Graph
..include:seqan/graph_decomposition.h
 */

struct DigraphCluster_;
typedef Tag<DigraphCluster_> DigraphCluster;

template <typename TCargo, typename TSpec>
class GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster>
{
public:
    typedef Graph<Tree<> > TDecompositionTree_;
    typedef typename VertexDescriptor<TDecompositionTree_>::Type TTreeVertexDescriptor;
    typedef String<TTreeVertexDescriptor> TVertexToClusterMap_;

    TDecompositionTree_ _decompositionTree;
    TVertexToClusterMap_ _vertexToClusterMap;

    GraphDecomposition() {}
};

// ============================================================================
// Metafunctions
// ============================================================================

// ----------------------------------------------------------------------------
// Metafunction ClusterTree
// ----------------------------------------------------------------------------

template <typename TCargo, typename TSpec>
struct ClusterTree<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> >
{
    typedef GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> TDecomposition_;
    typedef typename TDecomposition_::TDecompositionTree_ Type;
};

template <typename TCargo, typename TSpec>
struct ClusterTree<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const>
{
    typedef GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const TDecomposition_;
    typedef typename TDecomposition_::TDecompositionTree_ const Type;
};

// ----------------------------------------------------------------------------
// Metafunction ClusterNodeCargo
// ----------------------------------------------------------------------------

template <typename TCargo, typename TSpec>
struct ClusterNodeCargo<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> >
{
    typedef Nothing Type;
};

template <typename TCargo, typename TSpec>
struct ClusterNodeCargo<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const>
{
    typedef Nothing Type;
};

// ----------------------------------------------------------------------------
// Metafunction VertexToClusterMap
// ----------------------------------------------------------------------------

template <typename TCargo, typename TSpec>
struct VertexToClusterMap<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> >
{
    typedef GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> TDecomposition_;
    typedef typename TDecomposition_::TVertexToClusterMap_ Type;
};

template <typename TCargo, typename TSpec>
struct VertexToClusterMap<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const>
{
    typedef GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const TDecomposition_;
    typedef typename TDecomposition_::TVertexToClusterMap_ const Type;
};

// ----------------------------------------------------------------------------
// Metafunction EdgeToClusterMap
// ----------------------------------------------------------------------------

template <typename TCargo, typename TSpec>
struct EdgeToClusterMap<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> >
{
    typedef Nothing Type;
};

template <typename TCargo, typename TSpec>
struct EdgeToClusterMap<GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> const>
{
    typedef Nothing Type;
};

// ============================================================================
// Functions
// ============================================================================

// ----------------------------------------------------------------------------
// Function clusterDigraphTarjan
// ----------------------------------------------------------------------------

/**
.Function.clusterDigraphTarjan
..cat:Graph
..summary:Use Tarjan's $O(m log n)$ algorithm for "hierarchical clustering using strong components".
..signature:clusterDigraphTarjan(decomposition, g)
..param.decomposition:The decomposition tree resulting from the algorithm.
...type:Spec.Digraph Cluster Decomposition
..param.g:The digraph to cluster.
...type:Spec.Directed Graph
*/

template <typename TCargo, typename TSpec>
void
clusterDigraphTarjan(GraphDecomposition<Graph<Directed<TCargo, TSpec> >, DigraphCluster> & /*decomposition*/,
                     Graph<Directed<TCargo, TSpec> > & /*g*/)
{
    SEQAN_ASSERT_FAIL("NOT IMPLEMENTED!");
}

} // namespace seqan

#endif // #ifndef SEQAN_HEADER_GRAPH_DECOMPOSITON_GRAPH_CLUSTER_DIGRAPH_TARJAN_H_
